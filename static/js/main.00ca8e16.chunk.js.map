{"version":3,"sources":["actions.js","utils.js","QuoteDisplay.js","App.js","reducers.js","serviceWorker.js","index.js"],"names":["fetchQuotes","dispatch","type","fetch","then","response","json","data","payload","catch","error","console","getRandomInt","maxNumber","Math","floor","random","QuoteDisplay","props","state","color","opacity","colors","quoteBox","React","createRef","updateQuote","bind","onTextOpacityTransitionEnd","setupTweetButtonLink","setupTumblrButtonLink","this","setState","getRandomColor","changeQuote","length","setQuoteText","quoteBoxNode","current","text","querySelector","author","innerHTML","currentQuote","quote","id","style","backgroundColor","ref","onTransitionEnd","className","href","title","target","rel","onClick","encodeURIComponent","Component","connect","Object","assign","App","quotesReducer","createReducer","quoteList","hasRequestedData","isFetchingDone","action","quotes","newState","index","newQuote","JSON","stringify","Boolean","window","location","hostname","match","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.00ca8e16.chunk.js","sourcesContent":["export const START_REQUEST = 'start_request'\r\nexport const REQUEST_RESPONSE = 'request_response'\r\nexport const CHANGE_QUOTE = 'change_quote'\r\n\r\nexport function fetchQuotes() {\r\n    return (dispatch) => {\r\n        dispatch(startRequest())\r\n\r\n        return fetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json')\r\n        .then((response) => response.json())\r\n        .then(data => {\r\n            dispatch(requestResponse(data))\r\n        })\r\n        .catch(error => console.error(error))\r\n    }\r\n}\r\n\r\nfunction startRequest() {\r\n    return { type: START_REQUEST }\r\n}\r\n\r\nfunction requestResponse(payload) {\r\n    return {\r\n        type: REQUEST_RESPONSE,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function changeQuote() {\r\n    return { type: CHANGE_QUOTE }\r\n}\r\n","export function getRandomInt(maxNumber) {\r\n    return Math.floor(Math.random() * Math.floor(maxNumber))\r\n}\r\n","import React from 'react'\r\nimport { fetchQuotes, changeQuote } from './actions'\r\nimport { connect } from 'react-redux'\r\nimport { getRandomInt } from './utils'\r\nimport './QuoteDisplay.css'\r\n\r\nclass QuoteDisplay extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            color: 'black',\r\n            opacity: 1\r\n        }\r\n        this.colors = ['red', 'green', 'lightseagreen', 'darkgoldenrod', 'darkcyan', 'darkmagenta', 'dodgerblue', \r\n        'darkslategray', 'coral', 'midnightblue', 'limegreen', 'mediumturquoise', 'darkolivegreen', 'darkblue']\r\n        this.quoteBox = React.createRef()\r\n\r\n        this.updateQuote = this.updateQuote.bind(this)\r\n        this.onTextOpacityTransitionEnd = this.onTextOpacityTransitionEnd.bind(this)\r\n        this.setupTweetButtonLink = this.setupTweetButtonLink.bind(this)\r\n        this.setupTumblrButtonLink = this.setupTumblrButtonLink.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchQuotes().then(() => {\r\n            this.setState({ \r\n                color: this.getRandomColor(),\r\n                opacity: 0\r\n            })\r\n        })\r\n    }\r\n\r\n    updateQuote() {\r\n        this.props.changeQuote()\r\n        this.setState({\r\n            color: this.getRandomColor(),\r\n            opacity: 0\r\n        })\r\n    }\r\n\r\n    getRandomColor() {\r\n        return this.colors[getRandomInt(this.colors.length)]\r\n    }\r\n\r\n    onTextOpacityTransitionEnd() {\r\n        this.setState({ opacity: 1 })\r\n        this.setQuoteText()\r\n    }\r\n\r\n    setQuoteText() {\r\n        const quoteBoxNode = this.quoteBox.current\r\n        const text = quoteBoxNode.querySelector('#text')\r\n        const author = quoteBoxNode.querySelector('#author')\r\n        text.innerHTML = this.props.currentQuote.quote\r\n        author.innerHTML = \"- \" + this.props.currentQuote.author\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id='wrapper' style={{ color: this.state.color, backgroundColor: this.state.color }}>\r\n                <div id='quote-box' ref={this.quoteBox}>\r\n                    <div id='text-box' style={{ opacity: this.state.opacity }} onTransitionEnd={this.onTextOpacityTransitionEnd}>\r\n                        <i className='fas fa-quote-left'></i>\r\n                        <span id='text'></span>\r\n                    </div>\r\n                    <p id='author' style={{ opacity: this.state.opacity }} onTransitionEnd={this.onTextOpacityTransitionEnd}>- </p>\r\n                    <div id='buttons'>\r\n                        <a id='tweet-quote' href={this.setupTweetButtonLink()} title='Tweet this quote!' target='_blank' rel=\"noopener noreferrer\" style={{ backgroundColor: this.state.color }}>\r\n                            <i className='fab fa-twitter'></i>\r\n                        </a>\r\n                        <a id='tumblr-quote' href={this.setupTumblrButtonLink()} title='Post this quote on tumblr!' target='_blank' rel=\"noopener noreferrer\" style={{ backgroundColor: this.state.color }}>\r\n                            <i className='fab fa-tumblr'></i>\r\n                        </a>\r\n                        <button id='new-quote' onClick={this.updateQuote} style={{ backgroundColor: this.state.color }}>New quote</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    setupTweetButtonLink() {\r\n        return 'https://twitter.com/intent/tweet?hashtags=quotes&text=' \r\n        + encodeURIComponent('\"' + this.props.currentQuote.quote + '\" - ' + this.props.currentQuote.author)\r\n    }\r\n\r\n    setupTumblrButtonLink() {\r\n        return `https://www.tumblr.com/widgets/share/tool?posttype=quote&tags=quotes\r\n&caption=${encodeURIComponent(this.props.currentQuote.author)}&content=${this.props.currentQuote.quote}\r\n&canonicalUrl=${encodeURIComponent('https://www.google.com')}`\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return Object.assign({}, state)\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        fetchQuotes: () => fetchQuotes()(dispatch),\r\n        changeQuote: () => dispatch(changeQuote())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QuoteDisplay)","import React from 'react'\nimport QuoteDisplay from './QuoteDisplay'\n\nfunction App() {\n  return (\n    <QuoteDisplay />\n  )\n}\n\nexport default App\n","import { createReducer } from '@reduxjs/toolkit'\r\nimport { START_REQUEST, REQUEST_RESPONSE, CHANGE_QUOTE } from './actions'\r\nimport { getRandomInt } from './utils'\r\n\r\nconst initialState = {\r\n    quoteList: [],\r\n    currentQuote: {},\r\n    hasRequestedData: false,\r\n    isFetchingDone: false\r\n}\r\n\r\nconst quotesReducer = createReducer(initialState, {\r\n    [START_REQUEST]: (state) => Object.assign({}, state, { hasRequestedData: true }),\r\n    [REQUEST_RESPONSE]: (state, action) => {\r\n        const quoteList = action.payload.quotes\r\n        const newState = Object.assign({}, state, { quoteList, isFetchingDone: true })\r\n        newState.currentQuote = quoteList[getRandomInt(quoteList.length)]\r\n        return newState\r\n    },\r\n    [CHANGE_QUOTE]: (state) => {\r\n        let index = getRandomInt(state.quoteList.length)\r\n        let newQuote = state.quoteList[index]\r\n        if (JSON.stringify(newQuote) === JSON.stringify(state.currentQuote))\r\n            if (index + 1 < state.quoteList.length)\r\n                newQuote = state.quoteList[index+1]\r\n            else\r\n                newQuote = state.quoteList[index-1]\r\n        return Object.assign({}, state, { currentQuote: newQuote })   \r\n    }\r\n})\r\n\r\nexport default quotesReducer\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { configureStore } from '@reduxjs/toolkit'\nimport { Provider } from 'react-redux'\nimport quotesReducer from './reducers'\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport '@fortawesome/fontawesome-free/css/all.min.css'\n\nconst store = configureStore({ reducer: quotesReducer })\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}